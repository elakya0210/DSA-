# 1. Selection Sort 

class Solution {
    void selectionSort(int[] arr) {
        int n=arr.length;int min;
        for(int i=0;i<=n-2;i++){
            min=i;
            for(int j=i+1;j<=n-1;j++){
                if(arr[j]<arr[min]){
                    int temp=arr[j];
                    arr[j]=arr[min];
                    arr[min]=temp;
                }
            }
        }
    }
}
Time Complexity - O(n^2)

# 2. Bubble Sort

class Solution {
    public static void bubbleSort(int arr[]) {
        int n=arr.length;
        int didswap=0;
        for(int i=n-1;i>=1;i--){
            for(int j=0;j<=i-1;j++){
                if(arr[j]>arr[j+1]){
                    int temp=arr[j];
                    arr[j]=arr[j+1];
                    arr[j+1]=temp;
                    didswap=1;
                }
            }
            if(didswap==0) break;
        }
    }
}
Time Complexity - O(n^2) WORST CASE
                - O(n) BEST CASE

# 3. Insertion Sort

class Solution {
    public void insertionSort(int arr[]) {
        int n=arr.length;
        for(int i=0;i<=n-1;i++){
            int j=i;
            while(j>0 && arr[j-1]>arr[j]){
                int temp=arr[j];
                arr[j]=arr[j-1];
                arr[j-1]=temp;
                j--;
            }
        }
    }
}
Time Complexity - O(n^2) WORST/AVERAGE CASE
                - O(n) BEST CASE

# 4. Merge Sort 

class Solution {    
    void merge(int arr[],int low,int mid,int high){
        int left=low; int right=mid+1;
        ArrayList<Integer> temp=new ArrayList<>();
        while(left<=mid && right<=high){
            if(arr[left]<=arr[right]){
               temp.add(arr[left]);
               left++;
            }
            else{
                temp.add(arr[right]);
                right++;
            }
        }
        while(left<=mid){
            temp.add(arr[left]);
            left++;
        }
        while(right<=high){
            temp.add(arr[right]);
            right++;
        }
        for(int i=low;i<=high;i++){
            arr[i]=temp.get(i-low);
        }
    }
    void mergeSort(int arr[], int low, int high) {
        if (low >= high) return;
        int mid = (low + high) / 2 ;
        mergeSort(arr, low, mid);  // left half
        mergeSort(arr, mid + 1, high); // right half
        merge(arr, low, mid, high); //merging sorted halfs
    }
}
Time Complexity - O(log2N * N)
Space Complexity - O(n)

# 5. Quick Sort 

class Solution {
    static void quickSort(int arr[], int low, int high) {
        if(low<high){
            int partitionIndex=partition(arr,low,high);
            quickSort(arr,low,partitionIndex-1);
            quickSort(arr,partitionIndex+1,high);
        }
    }

    static int partition(int arr[], int low, int high) {
        int pivot=arr[low];
        int i=low; int j=high;
        while(i<j){
            while(arr[i]<=pivot && i<high){
                i++;
            }
            while(arr[j]>pivot && j>low){
                j--;
            }
            if(i<j){
                int temp=arr[i];
                arr[i]=arr[j];
                arr[j]=temp;
            }
        }
        arr[low] = arr[j];
        arr[j] = pivot;

        return j; 
    }
}
Time Complexity - O(log2N * N)
Space Complexity - O(1) 
