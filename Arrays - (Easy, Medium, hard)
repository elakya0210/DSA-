# 1. Largest Element in an Array 

class Solution {
    public static int largest(int[] arr) {
        // code here
        int max=Integer.MIN_VALUE;
        for(int i=0;i<arr.length;i++){
            if(arr[i]>max) max=arr[i];
        }
        return max;
    }
}
Time Complexity: O(N)
Space Complexity: O(1)

# 2. Second Largest Element in an Array without sorting

class Solution {
    public int getSecondLargest(int[] arr) {
        int sLargest=-1; int largest=arr[0];
        for(int i=0;i<arr.length;i++){
            if(arr[i]>  largest){
                sLargest=largest;
                largest=arr[i];
            }
            else if(arr[i]<largest && arr[i]>sLargest){
                sLargest=arr[i];
            }
        }
        return sLargest;
    }
}
Time Complexity: O(N), Single-pass solution
Space Complexity: O(1)

# 3 . Check if the array is sorted

class Solution {
    public boolean check(int[] nums) {
//SORTED
        /*for(int i=1;i<nums.length;i++){
            if(nums[i]>=nums[i-1]){

            }
            else {
                return false;
            }
        }
        return true;*/
//ROTATED AND SORTED
        int count=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]>nums[(i+1)%nums.length]){
                count++;
            }
            if(count>1) return false;
        }
        return true;
    }
}
Time Complexity: O(N)
Space Complexity: O(1)

# 4 . Remove duplicates from Sorted array

class Solution {
    public int removeDuplicates(int[] arr) {
        int i=0;
        for(int j=1;j<arr.length;j++){
            if(arr[i]!=arr[j]){
                arr[i+1]=arr[j];
                i++;
            }
        }
        return i+1;
    }
}
Time Complexity: O(N)
Space Complexity: O(1)

# 5. Rotate Array 

// BY K PLACES
class Solution {
    public void rotate(int[] nums, int k) {
        int n=nums.length;
        k=k%n;
        reverse(nums,0,n-k-1);
        reverse(nums,n-k,n-1);
        reverse(nums,0,n-1);
    }
    public void reverse(int[] nums,int start,int end){
        while(start<=end){
            int temp=nums[start];
            nums[start]=nums[end];
            nums[end]=temp;
            start++;
            end--;
        }
    }
}

// BY 1 PLACE 
int temp=arr[o];
for(int i=1;i<n;i++){
arr[i-1]=arr[i];
}
arr[n-1]=temp;
return arr;

Time Complexity: O(n), as we iterate through the array only once.
Space Complexity: O(1) as no extra space is used

# 6. Move Zeros to end

